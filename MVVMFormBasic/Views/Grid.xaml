<UserControl x:Class="MVVMFormBasic.Views.Grid"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MVVMFormBasic.Views"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <!--A Grid can contain multiple rows and columns. You define a height for each of the rows and 
        a width for each of the columns, in either an absolute amount of pixels, in a percentage of
        the available space or as auto, where the row or column will automatically adjust its size
        depending on the content. Use the Grid when the other panels doesn't do the job, e.g. when you
        need multiple columns and often in combination with the other panels.-->
        <Grid.RowDefinitions>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <!--The result can be seen on the screenshot, where the second button only takes exactly the amount of space
 it needs to render its longer text, the third button takes exactly the 100 pixels it was promised and the 
 first button, with the variable width, takes the rest.
        This can be a very useful technique when designing a wide range of dialogs. For instance, consider a simple
        contact form where the user enters a name, an e-mail address and a comment. The first two fields will usually
        have a fixed height, while the last one might as well take up as much space as possible, leaving room to type 
        a longer comment
        -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="100" />
            </Grid.ColumnDefinitions>
            <Button>Button 1</Button>
            <Button Grid.Column="1">Button 2 with long text</Button>
            <Button Grid.Column="2">Button 3</Button>
        </Grid>

        <Grid Grid.Row="1">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Button VerticalAlignment="Top" HorizontalAlignment="Center">Button 3</Button>
        <Button Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Right">Button 5</Button>
         </Grid>
        <Grid Grid.Row="2">
            <!--the first row and the first column has a width of 2*, which basically means that it uses twice the amount 
            of space as the rows and columns with a width of 1* (or just * - that's the same).
             Grid.Row and Grid.Column to place the controls in the grid, and once again you will notice that I have omitted
            these properties on the controls where I want to use either the first row or the first column (or both)-->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="2*" />
                <RowDefinition Height="1*" />
                <RowDefinition Height="1*" />
            </Grid.RowDefinitions>
            <Button>Button 1</Button>
            <Button Grid.Column="1">Button 2</Button>
            <Button Grid.Column="2">Button 3</Button>
            <Button Grid.Row="1">Button 4</Button>
            <Button Grid.Column="1" Grid.Row="1">Button 5</Button>
            <Button Grid.Column="2" Grid.Row="1">Button 6</Button>
            <Button Grid.Row="2">Button 7</Button>
            <Button Grid.Column="1" Grid.Row="2">Button 8</Button>
            <Button Grid.Column="2" Grid.Row="2">Button 9</Button>
        </Grid>
    </Grid>
</UserControl>
