<UserControl x:Class="MVVMFormBasic.Views.WrapPanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MVVMFormBasic.Views"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
     
  

        <!--Please be aware that while the Horizontal WrapPanel will match the height in the same row and the 
        Vertical WrapPanel will match the width in the same column, height is not matched in a Vertical WrapPanel
        and width is not matched in a Horizontal WrapPanel.-->
        <WrapPanel DockPanel.Dock="Left" Grid.Row="2">
            <Button>Test button 1</Button>
            <Button>Test button 2</Button>
            <Button>Test button 3</Button>
            <Button Height="40">Test button 4</Button>
            <Button>Test button 5</Button>
            <Button>Test button 6</Button>
        </WrapPanel>
        <!--The first thing you should notice is how the StackPanel doesn't really care whether or not 
        there's enough room for the content. It doesn't wrap the content in any way and it doesn't automatically
        provide you with the ability to scroll (you can use a ScrollViewer control for that though - more on 
        that in a later chapter).

        You might also notice that the default orientation of the StackPanel is Vertical, unlike the WrapPanel
        where the default orientation is Horizontal. But just like for the WrapPanel, this can easily be changed,
        using the Orientation property-->
        <StackPanel Orientation="Horizontal">
                <WrapPanel Orientation="Vertical">
                    <Button>Test button 1</Button>
                    <Button>Test button 2</Button>
                    <Button>Test button 3</Button>
                    <Button Width="140">Test button 4</Button>
                    <Button>Test button 5</Button>
                    <Button>Test button 6</Button>
                </WrapPanel>
                <Separator/>
                <WrapPanel Orientation="Vertical">
                    <Button>Test button 1</Button>
                    <Button>Test button 2</Button>
                    <Button>Test button 3</Button>
                    <Button Width="140" Height="44">Test button 4</Button>
                    <Button>Test button 5</Button>
                    <Button>Test button 6</Button>
                </WrapPanel>
        
        </StackPanel>

        <!--Another thing you will likely notice is that the StackPanel stretches its child control by default.
        On a vertically aligned StackPanel, like the one in the first example, all child controls get stretched 
        horizontally. On a horizontally aligned StackPanel, all child controls get stretched vertically, as seen above.
        The StackPanel does this by setting the HorizontalAlignment or VerticalAlignment property on its child controls 
        to Stretch, but you can easily override this if you want to.-->
        <StackPanel Orientation="Horizontal" Grid.Row="1">
            <Button VerticalAlignment="Top">Button 1</Button>
            <Button VerticalAlignment="Center">Button 2</Button>
            <Button VerticalAlignment="Bottom">Button 3</Button>
            <Button VerticalAlignment="Bottom">Button 4</Button>
            <Button VerticalAlignment="Center">Button 5</Button>
            <Button VerticalAlignment="Top">Button 6</Button>
        </StackPanel>
       

    </Grid>
</UserControl>
