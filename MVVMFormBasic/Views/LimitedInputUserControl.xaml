<UserControl x:Class="MVVMFormBasic.Views.LimitedInputUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MVVMFormBasic.Views" xmlns:model="clr-namespace:MVVMFormBasic.Model" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <!--For this article, we'll be creating a useful User control with the ability to limit the amount of text 
    in a TextBox to a specific number of characters, while showing the user how many characters have been used 
    and how many may be used in total. This is very simple to do, and used in a lot of web applications like 
    Twitter. It would be easy to just add this functionality to your regular Window, but since it could be useful
    to do in several places in your application, it makes sense to wrap it in an easily reusable UserControl.
    
    The upper part of the Grid contains two labels, one showing the title and the other one showing the stats.
    Each of them use data binding for all of the information needed - the Title and MaxLength comes from the 
    Code-behind properties, which we have defined in as regular properties on a regular class.

The current character count is obtained by binding to the Text.Length property directly on the TextBox control,
    which uses the lower part of the user control. 
    Notice that because of all these bindings, we don't need any C# code to update the labels or set the
    MaxLength property on the TextBox - instead, we just bind directly to the properties.
    
    -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Label Content="{Binding Title}" />
        <Label Grid.Column="1">
            <StackPanel Orientation="Horizontal">
 <!--the TextBlock is automatically updated when you enter text into the TextBox. In a non-bound world, 
                this would require us to listen to an event on the TextBox and then update the TextBlock
                each time the text changes, but with data binding, this connection can be established just
                by using markup.-->
                <TextBlock Text="{Binding ElementName=txtLimitedInput, Path=Text.Length}" />
                <TextBlock Text="/" />
<!--This simply returns the current data context (more about that later). This can definitely be useful,
                but in the most common situations, you would want to bind a property to another property 
                on the data context. A binding like that would look like this: {Binding Path=NameOfProperty}
                
                The Path notes the property that you want to bind to, however, since Path is the default 
                property of a binding, you may leave it out if you want to, like this: {Binding NameOfProperty}
                
                A binding has many other properties though, one of them being the ElementName which we use in our
                example. This allows us to connect directly to another UI element as the source. Each property
                that we set in the binding is separated by a comma:
                {Binding Path=Text, ElementName=txtValue}
                -->
                <TextBlock Text="{Binding MaxLength}" />
            </StackPanel>
        </Label>
        <TextBox MaxLength="{Binding MaxLength}" Grid.Row="1" Grid.ColumnSpan="2" Name="txtLimitedInput" ScrollViewer.VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" />
    </Grid>
</UserControl>
